# .github/workflows/docker-build-push.yml
name: Build and Push Docker Image

on:
  workflow_call:
    inputs:
      image_name:
        required: true
        type: string
    secrets:
      DOCKER_USERNAME:
        required: true
      DOCKER_PASSWORD:
        required: true

env:
  REGISTRY: artifactory-jcr.artifactory-jcr.svc:8081
  IMAGE_NAME: ${{ inputs.image_name }}

jobs:
  run-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Run tests
        run: |
          echo "Running tests..."
          # Add your test commands here
          echo "Tests completed successfully"

  build-image:
    runs-on: arc-runner-set
    needs: run-test
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          buildkitd-config-inline: |
            [registry."${{ env.REGISTRY }}"]
              insecure = true
              http = true
      
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          ssh: default=/home/runner/.ssh/id_ed25519

  deploy-on-dev:
    runs-on: ubuntu-latest
    needs: build-image
    # environment: development
    steps:
      - name: Deploy to development
        run: |
          echo "Deploying image: ${{ needs.build-image.outputs.image-tag }}"
          echo "Image digest: ${{ needs.build-image.outputs.image-digest }}"
          # Add your deployment commands here
          # For example, update Kubernetes deployment, Docker Compose, etc.
          echo "Deployment to development completed"

  verify-deployment:
    runs-on: ubuntu-latest
    needs: deploy-on-dev
    steps:
      - name: Verify deployment
        run: |
          echo "Verifying deployment..."
          # Add health checks, smoke tests, etc.
          echo "Deployment verification completed successfully"

  create-pr-to-master:
    runs-on: ubuntu-latest
    needs: [build-image, deploy-on-dev, verify-deployment]
    if: github.ref != 'refs/heads/master' && github.ref != 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN || github.token }}
      
      - name: Create Pull Request
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN || github.token }}
          script: |
            const { owner, repo } = context.repo;
            const head = '${{ github.ref_name }}';
            const base = 'master';
            
            // Check if PR already exists
            const existingPRs = await github.rest.pulls.list({
              owner,
              repo,
              head: `${owner}:${head}`,
              base,
              state: 'open'
            });
            
            if (existingPRs.data.length > 0) {
              console.log(`Pull request already exists: ${existingPRs.data[0].html_url}`);
              const existingPR = pulls.data[0];
              // Create a comment on the existing PR
              await github.rest.issues.createComment({
                owner,
                repo,
                issue_number: existingPR.number,
                body: `This pull request has already been created for the latest changes. Please review the existing PR: ${existingPR.html_url}`
              });
              return;
            }
            
            // Create the pull request
            const pr = await github.rest.pulls.create({
              owner,
              repo,
              title: 'Deploy ${{ env.IMAGE_NAME }} to production',
              head,
              base,
              body: `## Deployment Summary

            - **Image**: ${{ needs.build-image.outputs.image-tag }}
            - **Digest**: ${{ needs.build-image.outputs.image-digest }}
            - **Branch**: ${{ github.ref_name }}
            - **Commit**: ${{ github.sha }}
            
            ## Verification
            - ✅ Tests passed
            - ✅ Image built and pushed successfully
            - ✅ Deployed to development environment
            - ✅ Deployment verification completed
            
            Ready for production deployment!`
            });
            
            console.log(`Pull request created: ${pr.data.html_url}`);
            
            // Assign reviewer
            await github.rest.pulls.requestReviewers({
              owner,
              repo,
              pull_number: pr.data.number,
              reviewers: ['duchuyvp', 'texcorver']
            });
            
            console.log('Reviewer assigned successfully');
  
