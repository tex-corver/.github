# .github/workflows/docker-build-push.yml
name: Build and Push Docker Image

on:
  workflow_call:
    inputs:
      org-name:
        required: true
        type: string
        default: ${{ github.repository_owner }}
      project-name:
        required: true
        type: string
      docker-build-file:
        required: false
        type: string
        default: Dockerfile
      docker-build-context:
        required: false
        type: string
        default: .
      port:
        required: false
        type: number
        default: 8000
      ingress:
        required: false
        type: boolean
        default: true
      ingress-subdomain:
        required: false
        type: string
        default: ${{ github.repository_owner }}
      fastapi-root-path:
        required: false
        type: string
        default: /
      config-path:
        required: false
        type: string
        default: README.md
env:
  REGISTRY: artifactory-jcr.artifactory-jcr.svc:8081
  DOCKER_PASSWORD: y9wb3N0Z3
  DOCKER_USERNAME: admin
  IMAGE_NAME: ${{ inputs.org-name }}-${{ inputs.project-name }}

jobs:
  run-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Run tests
        run: |
          echo "Running tests..."
          # Add your test commands here
          echo "Tests completed successfully"

  build-image:
    runs-on: arc-runner-set
    needs: run-test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          buildkitd-config-inline: |
            [registry."${{ env.REGISTRY }}"]
              insecure = true
              http = true
      
      - name: Log in to Docker Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ env.DOCKER_PASSWORD }}
      
      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ${{ inputs.docker-build-context }}
          file: ${{ inputs.docker-build-file }}
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ env.REGISTRY }}/docker/${{ env.IMAGE_NAME }}:dev
          ssh: default=/home/runner/.ssh/id_ed25519

  deploy-on-dev:
    runs-on: arc-runner-set
    needs: build-image
    steps:
      - name: Set up kubectl
        uses: azure/setup-kubectl@v4
        id: install
      - name: Verify namespace
        run: |
          kubectl apply -f - <<EOF
          apiVersion: v1
          kind: Namespace
          metadata:
            name: ${{ inputs.org-name }}
          EOF
          echo "Namespace ${{ inputs.org-name }} is ready"
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Update secret config
        run: |
          kubectl create secret generic ${{ inputs.project-name }}-config \
            --from-file=${{ inputs.config-path }} \
            -n ${{ inputs.org-name }} --dry-run=client -o yaml | kubectl apply -f -

      - name: Deploy to development
        run: |
          kubectl apply -f - <<EOF
          apiVersion: argoproj.io/v1alpha1
          kind: Application
          metadata:
            name: ${{ env.IMAGE_NAME }}
            namespace: argocd
            finalizers:
              - resources-finalizer.argocd.argoproj.io
            labels:
              name: ${{ env.IMAGE_NAME }}
          spec:
            project: default
            sources:
              - repoURL: https://github.com/tex-corver/generic.git
                targetRevision: HEAD
                path: .
                helm:
                  valuesObject:
                    nameOverride: ${{ inputs.project-name }}
                    configPath: /etc/config
                    configSecret: ${{ inputs.project-name }}-config
                    image:
                      imageOverride: jcr.texcorver.com/docker/${{ env.IMAGE_NAME }}:dev
                    service:
                      port: ${{ inputs.port }}
                    imagePullSecrets:
                      - name: jcr-image-pull-secret
                    ingress:
                      enabled: ${{ inputs.ingress }}
                      className: nginx
                      annotations:
                        cert-manager.io/cluster-issuer: letsencrypt-prod
                        nginx.ingress.kubernetes.io/rewrite-target: /$2
                      hosts:
                        - host: ${{ inputs.ingress-subdomain }}.texcorver.com
                          paths:
                            - path: ${{ inputs.fastapi-root-path }}(/|$)(.*)
                              pathType: ImplementationSpecific
                      tls:
                        - secretName: ${{ inputs.ingress-subdomain }}.texcorver.com-tls
                          hosts:
                            - ${{ inputs.ingress-subdomain }}.texcorver.com
            destination:
              name: in-cluster
              namespace: ${{ inputs.org-name }}
            syncPolicy:
              automated:
                prune: true
                selfHeal: true
                allowEmpty: false
              syncOptions:
                - CreateNamespace=true
                - PrunePropagationPolicy=foreground
                - PruneLast=true
                - ApplyOutOfSyncOnly=true
              retry:
                limit: 5
                backoff:
                  duration: 5s
                  factor: 2
                  maxDuration: 3m
            revisionHistoryLimit: 3
          EOF 
          echo "Deployment to development completed"

  verify-deployment:
    runs-on: ubuntu-latest
    needs: deploy-on-dev
    steps:
      - name: Set up kubectl
        uses: azure/setup-kubectl@v4
        id: install

      - name: Wait for deployment readiness
        timeout-minutes: 5
        run: |
          kubectl wait --for=condition=available deployment/${{ env.IMAGE_NAME }} -n ${{ inputs.org-name }}
          kubectl rollout status deployment/${{ inputs.project-name }} -n ${{ inputs.org-name }}
          echo "Deployment verification completed successfully"
      - name: Verify deployment
        run: |
          echo "Running a simple request to verify the deployment..."
          curl -s --head ${{ env.IMAGE_NAME }}.${{ inputs.org-name }}.svc:${{ inputs.port }} | exit 1
          

  create-pr-to-master:
    runs-on: ubuntu-latest
    needs: [build-image, deploy-on-dev, verify-deployment]
    if: github.ref != 'refs/heads/master' && github.ref != 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN || github.token }}
      
      - name: Create Pull Request
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN || github.token }}
          script: |
            const { owner, repo } = context.repo;
            const head = '${{ github.ref_name }}';
            const base = 'master';
            
            // Check if PR already exists
            const existingPRs = await github.rest.pulls.list({
              owner,
              repo,
              head: `${owner}:${head}`,
              base,
              state: 'open'
            });
            
            if (existingPRs.data.length > 0) {
              console.log(`Pull request already exists: ${existingPRs.data[0].html_url}`);
              const existingPR = existingPRs.data[0];
              // Create a comment on the existing PR
              await github.rest.issues.createComment({
                owner,
                repo,
                issue_number: existingPR.number,
                body: `This pull request has already been created for the latest changes. Please review the existing PR: ${existingPR.html_url}`
              });
              return;
            }
            
            // Create the pull request
            const pr = await github.rest.pulls.create({
              owner,
              repo,
              title: 'Deploy ${{ env.IMAGE_NAME }} to production',
              head,
              base,
              body: `## Deployment Summary

            - **Branch**: ${{ github.ref_name }}
            - **Commit**: ${{ github.sha }}
            
            ## Verification
            - ✅ Tests passed
            - ✅ Image built and pushed successfully
            - ✅ Deployed to development environment
            - ✅ Deployment verification completed
            
            Ready for production deployment!`
            });
            
            console.log(`Pull request created: ${pr.data.html_url}`);
            
            // Assign reviewer
            await github.rest.pulls.requestReviewers({
              owner,
              repo,
              pull_number: pr.data.number,
              reviewers: ['duchuyvp', 'texcorver']
            });
            
            console.log('Reviewer assigned successfully');
  
