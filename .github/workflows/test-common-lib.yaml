# .github/workflows/test-common-lib.yaml
name: Common Library Test Workflow
on:
  workflow_call:
    outputs: {}
    inputs:
      docker-build-file:
        required: false
        type: string
        default: Dockerfile
        description: |
          Relative path from root of repository to the Dockerfile used for building your application image.
          Useful when you have multiple Dockerfiles or when the Dockerfile is in a subdirectory.
          Examples: 'Dockerfile', 'docker/Dockerfile', 'src/apps/api/Dockerfile'
          Default: 'Dockerfile' (in repository root)
      docker-build-context:
        required: false
        type: string
        default: .
        description: |
          Directory path that contains all the files needed to build your Docker image.
          This determines which files are available during the build process (COPY, ADD commands).
          Should contain all necessary source code, dependencies, and configuration files.
          Examples: '.', 'src/apps/schedule-manager', ...
          Default: '.' (repository root)
      config-path:
        required: false
        type: string
        default: .ci-config
        description: |
          Path to the configuration file used by the application.
          The file will be mount to `CONFIG_PATH` inside your container when running tests.
          Read more at `utils.get_config`.
          Default: '.ci-config' (in repository root)
      create-pr:
        required: false
        type: boolean
        default: true
        description: |
          Whether to create a pull request to merge the changes into the `master` branch after deployment.
          Useful for development workflows where you want to review changes before merging.
          If false, the workflow will not create a PR, but the deployment will still proceed.
          Ignored if the workflow is triggered on `master` branch.
          Default: true

env:
  REGISTRY: artifactory-jcr.artifactory-jcr.svc:8081

jobs:
  build:
    runs-on: arc-runner-set
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          buildkitd-config-inline: |
            [registry."${{ env.REGISTRY }}"]
              insecure = true
              http = true

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: ${{ inputs.docker-build-context }}
          file: ${{ inputs.docker-build-file }}
          load: true
          platforms: linux/amd64
          ssh: default=/home/runner/.ssh/id_ed25519
          tags: ${{ github.repository }}:ci
      
      - name: Prepare configuration
        run: |
          docker volume create config
          docker container create --name alpine -v config:/etc/config alpine:latest
          docker cp ${{ inputs.config-path }}/. alpine:/etc/config
      - name: Run tests in Docker container
        run: |
          docker run --rm \
            --env CONFIG_PATH=/etc/config \
            -v config:/etc/config \
            ${{ github.repository }}:ci \
            pytest

          if [ $? -eq 0 ]; then
            echo "Tests passed"
          else
            echo "Tests failed"
            exit 1
          fi
  create-pr-to-master:
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref != 'refs/heads/master' && github.ref != 'refs/heads/main' && inputs.create-pr
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN || github.token }}
      
      - name: Create Pull Request
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN || github.token }}
          script: |
            const { owner, repo } = context.repo;
            const head = '${{ github.ref_name }}';
            const base = 'master';
            
            // Check if PR already exists
            const existingPRs = await github.rest.pulls.list({
              owner,
              repo,
              head: `${owner}:${head}`,
              base,
              state: 'open'
            });
            
            if (existingPRs.data.length > 0) {
              console.log(`Pull request already exists: ${existingPRs.data[0].html_url}`);
              const existingPR = existingPRs.data[0];
              // Create a comment on the existing PR
              await github.rest.issues.createComment({
                owner,
                repo,
                issue_number: existingPR.number,
                body: `This pull request has already been created for the latest changes. Please review the existing PR: ${existingPR.html_url}`
              });
              return;
            }
            
            // Create the pull request
            const pr = await github.rest.pulls.create({
              owner,
              repo,
              title: 'Merge to master',
              head,
              base,
              body: `## Deployment Summary

            - **Branch**: ${{ github.ref_name }}
            - **Commit**: ${{ github.sha }}
            
            ## Verification
            - âœ… Tests passed
            
            Ready to merge!`
            });
            
            console.log(`Pull request created: ${pr.data.html_url}`);
            
            // Assign reviewer
            await github.rest.pulls.requestReviewers({
              owner,
              repo,
              pull_number: pr.data.number,
              reviewers: ['duchuyvp', 'texcorver']
            });
            
            console.log('Reviewer assigned successfully');
  
